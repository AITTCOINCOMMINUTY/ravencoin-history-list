{"mappings":"AAAe,kDAAoB,MAAgB,EAAkB;IACnE,MAAM,wBAAwB,qDAA+B;IAC7D,MAAM,UAAU,MAAM,IAAI,CAAC,sBAAsB,MAAM,IAAI,GAAG,CAAC;IAC/D,QAAQ,GAAG,CAAC;IACZ,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,kCAAY,MAAgB,EAAgB;IACnD,sEAAsE;IACtE,IAAI,OAAO,MAAM,KAAK,GAAG;QACvB,MAAM,QAAQ,MAAM,CAAC,EAAE;QACvB,MAAM,OAAqB;YACzB,QAAQ,MAAM,QAAQ,GAAG;YACzB,QAAQ;gBACN;oBACE,WAAW,MAAM,SAAS;oBAC1B,OAAO,MAAM,QAAQ,GAAG;oBACxB,UAAU,MAAM,QAAQ;gBAC1B;aACD;YACD,aAAa,MAAM,MAAM;YACzB,eAAe,MAAM,IAAI;QAC3B;QACA,OAAO;IACT,OAAO;QACL,MAAM,OAAO,CAAC;QACd,OAAO,GAAG,CAAC,CAAC,QAAU;YACpB,IAAI,CAAC,MAAM,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,SAAS,CAAC,IAAI;YACjD,IAAI,CAAC,MAAM,SAAS,CAAC,IAAI,MAAM,QAAQ;QACzC;QAEA,IAAI,SAAS,KAAK;QAClB,MAAM,SAA6B,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,OAAS;YACjE,yDAAyD;YACzD,IAAI,IAAI,CAAC,KAAK,GAAG,GACf,SAAS,IAAI;YAGf,MAAM,MAAM;gBACV,WAAW;gBACX,UAAU,IAAI,CAAC,KAAK;gBACpB,OAAO,IAAI,CAAC,KAAK,GAAG;YACtB;YACA,OAAO;QACT;QAEA,MAAM,WAAyB;oBAC7B;YACA,aAAa,MAAM,CAAC,EAAE,CAAC,MAAM;YAC7B,eAAe,MAAM,CAAC,EAAE,CAAC,IAAI;oBAC7B;QACF;QACA,OAAO;IACT,CAAC;AACH;AACA,SAAS,qDAA+B,MAAgB,EAAE;IACxD,MAAM,MAA6B,IAAI;IACvC,OAAO,GAAG,CAAC,CAAC,QAAU;QACpB,MAAM,MAAgB,IAAI,GAAG,CAAC,MAAM,IAAI,KAAK,EAAE;QAC/C,IAAI,IAAI,CAAC;QACT,IAAI,GAAG,CAAC,MAAM,IAAI,EAAE;IACtB;IACA,OAAO;AACT","sources":["index.ts"],"sourcesContent":["export default function getHistory(deltas: IDelta[]): IHistoryItem[] {\r\n  const deltasByTransactionId = getDeltasMappedToTransactionId(deltas);\r\n  const history = Array.from(deltasByTransactionId.values()).map(getListItem);\r\n  console.log(history);\r\n  return history;\r\n}\r\n\r\n/**\r\n *\r\n * @param deltas Address deltas from the same transaction\r\n */\r\nfunction getListItem(deltas: IDelta[]): IHistoryItem {\r\n  //Very simple if only one delta, like you received two LEMONADE tokens\r\n  if (deltas.length === 1) {\r\n    const delta = deltas[0];\r\n    const item: IHistoryItem = {\r\n      isSent: delta.satoshis < 0,\r\n      assets: [\r\n        {\r\n          assetName: delta.assetName,\r\n          value: delta.satoshis / 1e8,\r\n          satoshis: delta.satoshis,\r\n        },\r\n      ],\r\n      blockHeight: delta.height,\r\n      transactionId: delta.txid,\r\n    };\r\n    return item;\r\n  } else {\r\n    const temp = {};\r\n    deltas.map((delta) => {\r\n      temp[delta.assetName] = temp[delta.assetName] || 0;\r\n      temp[delta.assetName] += delta.satoshis;\r\n    });\r\n\r\n    let isSent = false;\r\n    const assets: INeedABetterName[] = Object.keys(temp).map((name) => {\r\n      //If any of the values is negative, it means we have sent\r\n      if (temp[name] < 0) {\r\n        isSent = true;\r\n      }\r\n\r\n      const obj = {\r\n        assetName: name,\r\n        satoshis: temp[name],\r\n        value: temp[name] / 1e8,\r\n      };\r\n      return obj;\r\n    });\r\n\r\n    const listItem: IHistoryItem = {\r\n      assets,\r\n      blockHeight: deltas[0].height,\r\n      transactionId: deltas[0].txid,\r\n      isSent,\r\n    };\r\n    return listItem;\r\n  }\r\n}\r\nfunction getDeltasMappedToTransactionId(deltas: IDelta[]) {\r\n  const map: Map<string, IDelta[]> = new Map();\r\n  deltas.map((delta) => {\r\n    const arr: IDelta[] = map.get(delta.txid) || [];\r\n    arr.push(delta);\r\n    map.set(delta.txid, arr);\r\n  });\r\n  return map;\r\n}\r\nexport interface IDelta {\r\n  assetName: string;\r\n  satoshis: number;\r\n  txid: string;\r\n  index: number;\r\n  blockindex: number;\r\n  height: number;\r\n  address: string;\r\n}\r\n\r\ninterface INeedABetterName {\r\n  assetName: string;\r\n  value: number;\r\n  satoshis: number;\r\n}\r\nexport interface IHistoryItem {\r\n  isSent: boolean;\r\n  assets: INeedABetterName[];\r\n  blockHeight: number;\r\n  transactionId: string;\r\n}\r\n"],"names":[],"version":3,"file":"index.mjs.map"}